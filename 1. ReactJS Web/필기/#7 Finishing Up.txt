#7-1 Updating Movie Component
 - 이제 dribble.com 처럼 수정
 - 요소검사를 통해 movie DB에서 어떤 종류의 정보를 받는지 확인
 - 포스터, 제목, 장르, 평점, 설명 정보가 필요
 - 제목은 title에서 확인, 사용은 title-english
 - 포스터는 cover_image에서 확인, 사용은 medium_cover_image
 - 장르는 genres에서 배열로 확인
 - 평점은 rating으로 되어 있는데 실수 형태로는 사용할 수 없음
 - 설명은 description-full, summary, synopsis에서 확인할 수 있음, 사용은 synopsis
 - 각 정보를 props 로 추가
  _renderMovies = () => {
    const movies = this.state.movies.map(movie => {
      console.log(movie)
      return <Movie
        title={movie.title_english} 
        poster={movie.small_cover_image} 
        key={movie.id}
        genres={movie.genres}
        synopsis={movie.synopsis}
      />
    })
    return movies
  }
 
 - prop types에 genres와 synopsis 추가
 Movie.propTypes = {
    title: PropTypes.string.isRequired,
    poster: PropTypes.string.isRequired,
    genres: PropTypes.array.isRequired,
    synopsis: PropTypes.string.isRequired
}
 - Movie function에 genres, synopsis 추가 및 html 코드 작성
function Movie({ title, poster, genres, synopsis }) {
    return (
        <div className="Movie">
            <div className="Movie__Column">
                <MoviePoster poster={poster} alt={title} />
            </div>
            <div className="Movie__Column">
                <h1>{title}</h1>
                <div className="Movie__Genres">
                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}
                </div>
                <p className="Movie__Synopsis">
                    {synopsis}
                </p>
            </div>
        </div>
    )
} 
 - 각각의 div에 css를 적용할 className 부여
 - poster에 alt prop을 title로 추가
 - genres는 map을 통해서 배열마다 MovieGenre function을 이용해서 출력 
 - synopsis는 그냥 p 태그로
 
 - MoviePoster 수정
function MoviePoster({ poster, alt }) {
    return (
        <img src={poster} alt={alt} title={alt} className="Movie__Poster" />
    )
}
 - alt, title에 title 값으로 전달받은 alt를 저장
 - MovieGenre 추가
function MovieGenre({ genre }) {
    return (
        <span className="Movie__Genre">{genre}</span>
    )
}
 - Genres 배열 내에 있는 각각의 Genre 값을 <span> 태그로 감싸서 출력
 - 추가된 props에 따라 propTypes 정의
MoviePoster.propTypes = {
    poster: PropTypes.string.isRequired,
    alt: PropTypes.string.isRequired
}
MovieGenre.propTypes = {
    genre: PropTypes.string.isRequired
}
총정리
 - 이번에 한 것은 장르와 시놉시스같은 props을 추가한 것
 - Movie 컴포넌트에 genres와 synopsis props를 추가하고, propsType도 등록
 - 기본적인 html 작업, JSX로 클래스명 추가
 - Poster에서는 alt props를 통해 마우스를 호버할 때 제목이 뜨도록
 - genres 맵핑은 MovieGenre 컴포넌트를 추가해서 간단한 span 태그를 return 하도록 설정

#7-2 Giving some CSS to Movie
 - 자세한 내용은 깃허브 참조 : https://github.com/nomadcoders/movie_app/tree/master/src
 - 클래스를 API가 업데이트 되기 전과 된 후를 구분
  render() {
    return (
      <div className={movies ? "App" : "App--loading"}>
        {this.state.movies ? this._renderMovies() : 'Loading'}
      </div>
    );
  }
 - API를 rating 순서가 아니라 download_count 순서로 수정
  _callApi = () =>{
    return fetch("https://yts.am/api/v2/list_movies.json?sort_by=download_count")
    .then(potato => potato.json())
    .then(json => json.data.movies)
    .catch(err => console.log(err))
  }
 - synopsis가 너무 길게 표시되는 것을 막기 위해서 컴포넌트를 다운
 - VSC 터미널에서 yarn add react-lines-ellipsis
 - Movie.js 에서 import LinesEllipsis from 'react-lines-ellipsis'
 - p 태그를 사용했던 synopsis 부분을 수정
                <div className="Movie__Synopsis">
                    <LinesEllipsis
                        text={synopsis}
                        maxLine='3'
                        ellipsis='...'
                        trimRight
                        basedOn='letters'
                    />
                </div>

 - css에 대해서 더 알고 싶으면 카카오톡 클론 코딩 참조
