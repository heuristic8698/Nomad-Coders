#6-1 Ajax in React
 - AJAX는 Asynchronous JavaScript and XML의 약자
 - 요즘은 XML보다는 JSON을 더 많이 씀
 - JSON은 JavaScript Object Notation 의 약자로 Object를 자바스크립트로 작성
 - AJAX를 React에 적용하는 것은 fetch를 이용
 - fetch request를 만들면 url로 이동
 - http request에 관한 방법은 많지만 이 수업에서는 다루지는 않을 것
 - 본 강의 에서는 fetch를 이용해서 url에서 뭔가를 get하는 방법을 배울 것
 - 사용할 url은 이전에 이야기한 API - YTS 토렌트 영화 데이터 베이스
  state = {}

  componentDidMount(){
    fetch("https://yts.am/api/v2/list_movies.json?sort_by=rating")
  }
 - 저장 후 개발자 도구에서 network 탭을 보면 localhost를 부로그 bundle.js(리액트)를
  호출한 뒤에 API 데이터베이스를 호출한 것을 볼 수 있음
 - 콘솔로 확인하면 Promise가 표시되는 것을 볼 수 있는데 자세한 내용은 다음 강의에서
  componentDidMount(){
    console.log(fetch("https://yts.am/api/v2/list_movies.json?sort_by=rating"))
  }
 - 이전에는 URL로 직접 호출해야 했지만 AJAX는 url을 자바스크립트로
  비동기화 방법을 통해 불러옴
 - AJAX를 사용하는 이유는 뭔가를 불러올 때마다 페이지 새로고침을 하지 않기 위해서

#6-2 Promises
 - Promise는 새로운 자바스크립트 개념
 - Promise가 유용한 이유는 asynchronous programming 때문
 - synchrounus 동기적이라는 것은 어떤 명령이 실행된 후에야 다른 명령을 실행할 수 있는 것
 - 만약 영화 DB에 접근 후에 애니메이션 DB에서 정보를 가져온다고 할 때, DB가 느리다면
  계속 기다려야함
 - 자바스크립트 + AJAX를 사용할 때 바람직한 상황이 아님
 - 그래서 이럴 때는 promise를 사용, promise는 비동기적, 작업이 동시에 이루어질 수 있음
 - 계속 다른 작업을 스케줄해놓고 모든 작업이 다른 작업과 상관없이 실행됨
 - 또다른 기능은 시나리오를 잡는 방법을 만들어줌
  componentDidMount(){
    fetch("https://yts.am/api/v2/list_movies.json?sort_by=rating")
    .then(response => console.log(response))
    .catch(err => console.log(err))
    // (function(err) {console.log(err)})
  }
 - fetch로 url를 가져오는 작업이 끝나면 then이 실행, 만약 문제가 있으면 catch가 실행
 - then은 fetch로 가져온 결과를 parameter로 가짐, response가 아닌 다른 이름으로 사용해도 무방
 - 저장 후 새로고침된 페이지에서 콘솔을 확인하면 Response가 표시되는 것을 확인할 수 있음
 - header에서 ok가 true인 것은 request가 성공적이라는 것, redirected 되지 않고 status는 200(OK)
 - body 가 ReadableStream이라고 되어 있는 것은 바이트로 되어 있다는 의미
 - JSON으로 바꿔야하고 간단함, 이제 알아볼 것
 - bodyUsed가 false 인 것은 아직 데이터를 사용하지 않았다는 것
 - ReadableStream을 json으로 변경 후 콘솔 출력
  componentDidMount(){
    fetch("https://yts.am/api/v2/list_movies.json?sort_by=rating")
    .then(potato => potato.json())
    .then(json => console.log(json))
    .catch(err => console.log(err))
    // (function(err) {console.log(err)})
  }
 - 콘솔을 보면 data에서 movie_count, 20개의 movie 데이터를 확인할 수 있다.
 - 이전에는 XML http Request로 가져왔여야 했는데 간편해짐

#6-3 Async Await in React
 - Await, Async는 지난 강의의 코드를 좀더 분명하게 표현해주는 것
 - json 데이터를 then을 연속으로 사용해서 읽어오는 것은 비효율적
 - 이 때 Await, Async를 사용
 - 우선 componentDidMount 의 내용을 새로운 함수 _callApi를 작성해서 이동
  _callApi = () =>{
    return fetch("https://yts.am/api/v2/list_movies.json?sort_by=rating")
    .then(potato => potato.json())
    .then(json => console.log(json))
    .catch(err => console.log(err))
  }
 - _callApi 는 fetch 한 결과 값을 return
 - componentDidMount는 this._getMovie() 함수 정의 후 호출
  componentDidMount(){
    this._getMovies();
  }
  _getMovies = async () =>{
    const movies = await this._callApi()
    this.setState({
      movies
    })
  }
 - async는 비동기적으로 함수를 실행하겠다는 의미
 - await은 뒤의 함수 실행이 완료될 때까지 기다리겠다는 의미
 - movies array에서 기존에 title과 poster에 해당하는 값은 title을 동일
 - poster는 large_cover_image로 수정
  _renderMovies = () => {
    const movies = this.state.movies.map((movie, index) => {
      console.log(movie)
      return <Movie title={movie.title} poster={movie.large_cover_image} key={index}/>
    })
    return movies
  }
 - 저장 후 새로고침된 페이지를 보면 api를 불러와서 영화내용이 보이는 것을 확인할 수 있음

 총정리
 - fetch를 _callApi로 변경
 - getMovies라는 asynchronous function 정의
 - getMovies 내에 movies 라는 이름의 const variable 생성
 - _callApi 실행이 완료되고 return 하는 것을 await
 - _callApi는 fetch promise를 return 하는데 이것은 모든 데이터를 나타내는 json 파일
 - 결과적으로 json.data.movies가 const movies에 대입
 - App 컴포넌트의 state를 movies로 setState
 - 이전의 movies: movies 가 아니라 최신 자바스크립트인 movies로 입력
 - state 안에 movies가 생기면 render function은 _renderMovies라는 function 실행
 - _renderMovies function은 const movies를 정의
 - movies 변수는 .map을 통해서 state에 저장된 movies를 새로 맵핑, 배열화 한 형태
 - key는 반드시 index일 필요는 없고 movie.id로 수정할 수도 있음
  _renderMovies = () => {
    const movies = this.state.movies.map(movie => {
      console.log(movie)
      return <Movie title={movie.title} poster={movie.large_cover_image} key={movie.id}/>
    })
    return movies
  }
 - id를 사용하는 이유는 컴포넌트의 key로 인덱스로 사용하는 것이 느리기 때문